{"version":3,"file":"static/js/contacts.b4b94af3.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Container/Container.module.css?9f71","components/Container/Container.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/ContactList/ContactItem/ContactItem.module.css?7ce2","components/ContactList/ContactItem/ContactItem.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://react-homework-template/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.js","webpack://react-homework-template/./src/pages/page.module.css?f580","pages/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__VVOCq\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"item\":\"ContactForm_item__zE+8S\",\"label\":\"ContactForm_label__-cVXI\",\"button\":\"ContactForm_button__eSwX9\",\"error\":\"ContactForm_error__C1smZ\"};","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm({\n  name = 'Name',\n  number = 'Number',\n  changeData,\n  onSubmit,\n}) {\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={Yup.object(\n        changeData\n          ? {\n              name: Yup.string().matches(\n                /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n                \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              ),\n              number: Yup.string().matches(\n                /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n                'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n              ),\n            }\n          : {\n              name: Yup.string()\n                .matches(\n                  /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n                  \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                )\n                .required('Required'),\n              number: Yup.string()\n                .matches(\n                  /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n                  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n                )\n                .required('Required'),\n            }\n      )}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        onSubmit(values);\n        setSubmitting(false);\n        resetForm({});\n      }}\n    >\n      <Form className={s.form}>\n        <label htmlFor=\"name\" className={s.label}>\n          {name}\n        </label>\n        <Field name=\"name\" type=\"text\" className={s.input} />\n        <ErrorMessage\n          name=\"name\"\n          render={msg => <div className={s.error}>{msg}</div>}\n        />\n\n        <label htmlFor=\"name\" className={s.label}>\n          {number}\n        </label>\n        <Field name=\"number\" type=\"tel\" className={s.input} />\n        <ErrorMessage\n          name=\"number\"\n          render={msg => <div className={s.error}>{msg}</div>}\n        />\n\n        <button type=\"submit\" className={s.button}>\n          {changeData ? 'Change details' : 'Add contact'}\n        </button>\n      </Form>\n    </Formik>\n  );\n}\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  changeData: PropTypes.bool,\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__aUSMv\",\"number\":\"ContactItem_number__2mm0v\",\"name\":\"ContactItem_name__+rhVe\",\"button\":\"ContactItem_button__3O59k\",\"contactWrap\":\"ContactItem_contactWrap__0zsjP\",\"buttonWrap\":\"ContactItem_buttonWrap__mQm49\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { AiOutlineClose, AiFillSetting } from 'react-icons/ai';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport s from './ContactItem.module.css';\nimport {\n  useDeleteContactMutation,\n  usePatchContactMutation,\n  useGetContactsQuery,\n} from 'redux/contactsAPI';\nimport Popover from '@mui/material/Popover';\nimport ContactForm from 'components/ContactForm';\nimport { toast } from 'react-toastify';\n\nexport default function ContactItem({ name, number, id }) {\n  const [deletContact, { isLoading }] = useDeleteContactMutation();\n  const [changeContact] = usePatchContactMutation();\n  const { data } = useGetContactsQuery();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const onContactChange = contact => {\n    if (data.some(({ name }) => name === contact.name)) {\n      toast.error(`${contact.name} is already in contacts`, {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n      return;\n    }\n\n    !contact.name && (contact.name = name);\n    !contact.number && (contact.number = number);\n    changeContact({ contact, contactId: id });\n    handleClose();\n  };\n\n  const open = Boolean(anchorEl);\n  const idPopover = open ? 'simple-popover' : undefined;\n\n  return (\n    <>\n      <div className={s.contactWrap}>\n        <span className={s.name}>{name}</span>\n        <span className={s.number}>{number}</span>\n      </div>\n      <div className={s.buttonWrap}>\n        <button onClick={handleClick} type=\"button\" className={s.button}>\n          <AiFillSetting />\n        </button>\n        <button\n          onClick={() => deletContact(id)}\n          type=\"button\"\n          className={s.button}\n        >\n          {isLoading ? (\n            <ClipLoader size=\"16px\" color=\"white\" />\n          ) : (\n            <AiOutlineClose />\n          )}\n        </button>\n      </div>\n      <Popover\n        id={idPopover}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'center',\n          horizontal: 'center',\n        }}\n      >\n        <ContactForm\n          name={name}\n          number={number}\n          changeData\n          onSubmit={onContactChange}\n        />\n      </Popover>\n    </>\n  );\n}\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\"};","import PropTypes from 'prop-types';\nimport ContactItem from './ContactItem';\n\nimport s from './ContactList.module.css';\n\nexport default function ContactList({ contacts }) {\n  return (\n    <ul className={s.list}>\n      {contacts &&\n        [...contacts]\n          .sort(({ name: nameA }, { name: nameB }) =>\n            nameA.toLowerCase().localeCompare(nameB.toLowerCase())\n          )\n          .map(({ name, number, id }) => (\n            <li key={id} className={s.item}>\n              <ContactItem name={name} number={number} id={id} />\n            </li>\n          ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nexport default function Filter({ changeFilter }) {\n  return (\n    <div className={s.filter}>\n      <label htmlFor=\"filter\" className={s.title}>\n        Find contacts\n      </label>\n      <input\n        className={s.input}\n        id=\"filter\"\n        onChange={e => changeFilter(e.target.value)}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Notification_message__iUHOw\"};","import PropTypes from 'prop-types';\nimport s from './Notification.module.css';\n\nexport default function Notification({ message }) {\n  return <p className={s.message}>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsPageWrap\":\"page_contactsPageWrap__IQXbX\"};","import { useState, useMemo } from 'react';\nimport { useGetContactsQuery, useAddContactMutation } from 'redux/contactsAPI';\nimport { toast } from 'react-toastify';\nimport Container from 'components/Container';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Notification from 'components/Notification';\nimport s from './page.module.css';\n\nexport default function ContactsPage() {\n  const [filter, setFilter] = useState('');\n  const { data } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n  const formSubmit = contact => {\n    if (data.some(({ name }) => name === contact.name)) {\n      toast.error(`${contact.name} is already in contacts`, {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n      return;\n    }\n    addContact(contact);\n  };\n\n  const filteredContacts = useMemo(() => {\n    if (!data) {\n      return;\n    }\n    const normilizedFilter = filter.toLowerCase();\n    return data.filter(contact =>\n      contact.name.toLowerCase().includes(normilizedFilter)\n    );\n  }, [data, filter]);\n\n  return (\n    <div className={s.contactsPageWrap}>\n      <Container>\n        <h2>Phonebook menu</h2>\n        <ContactForm onSubmit={formSubmit} />\n        <Filter changeFilter={setFilter} />\n      </Container>\n      <Container style={{ position: 'relative' }}>\n        <h2>Contacts</h2>\n        {filteredContacts?.length > 0 && (\n          <ContactList contacts={filteredContacts} />\n        )}\n        {filteredContacts?.length === 0 && (\n          <Notification message={'No contacts found'} />\n        )}\n      </Container>\n    </div>\n  );\n}\n"],"names":["Container","children","className","s","ContactForm","name","number","changeData","onSubmit","initialValues","validationSchema","Yup","matches","required","values","setSubmitting","resetForm","htmlFor","type","render","msg","ContactItem","id","useDeleteContactMutation","deletContact","isLoading","usePatchContactMutation","changeContact","data","useGetContactsQuery","useState","anchorEl","setAnchorEl","handleClose","open","Boolean","idPopover","undefined","onClick","event","currentTarget","size","color","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","contact","some","toast","position","contactId","ContactList","contacts","sort","nameA","nameB","toLowerCase","localeCompare","map","Filter","changeFilter","onChange","e","target","value","Notification","message","ContactsPage","filter","setFilter","useAddContactMutation","addContact","filteredContacts","useMemo","normilizedFilter","includes","style","length"],"sourceRoot":""}